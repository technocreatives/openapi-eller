/* tslint:disable:no-unused-variable */

/*
 * In order to generate this file for ECMAScript, create a package.json
 * with the dependencies: reflect-metadata isomorphic-fetch universal-url
 *
 * Generate a tsconfig.json using tsc (install with npm i typescript if needed).
 * You should set the target to at least "es2016" and enable experimentalDecorators.
 *
 * You may need to disable "strict" for compilation to succeed. These issues are bugs,
 * so please report them.
 */

import "reflect-metadata"
import "isomorphic-fetch"
import { URL } from "universal-url"
{{#if config.dev}}
import puppeteer from "puppeteer"
{{/if}}

interface VerbConfig {
    verb: string
    path: string
}

const neofitSymbol = Symbol("neofit")
const baseUrlSymbol = Symbol("baseUrl")
const interceptorSymbol = Symbol("interceptor")
const Symbols = {
    request: Symbol("request"),
    response: Symbol("response"),
    url: Symbol("URL"),
    path: Symbol("Path"),
    body: Symbol("Body"),
    query: Symbol("Query"),
    header: Symbol("Header"),
    jsonProperty: Symbol("JsonProperty")
}

function httpVerb(verb: String, urlPath: string) {
    return Reflect.metadata(Symbols.url, {
        verb,
        path: urlPath 
    } as VerbConfig)
}

const GET = httpVerb.bind(httpVerb, "GET")
const POST = httpVerb.bind(httpVerb, "POST")
const PUT = httpVerb.bind(httpVerb, "PUT")
const DELETE = httpVerb.bind(httpVerb, "DELETE")
const PATCH = httpVerb.bind(httpVerb, "PATCH")
const OPTIONS = httpVerb.bind(httpVerb, "OPTIONS")
const HEAD = httpVerb.bind(httpVerb, "HEAD")
const TRACE = httpVerb.bind(httpVerb, "TRACE")

enum BodyType {
    JSON = "application/json",
    Text = "text/plain",
    FormData = "multipart/form-data",
    Blob = "application/octet-stream"
}

function param(sym: Symbol, item: string) {
    function innerParam(target: Object, propertyKey: string | symbol, parameterIndex: number) {
        const params: { [key: string]: number } = Reflect.getOwnMetadata(sym, target, propertyKey) || {}
        params[item] = parameterIndex
        Reflect.defineMetadata(sym, params, target, propertyKey)
    }

    return innerParam
}

const Path = param.bind(param, Symbols.path)
const Query = param.bind(param, Symbols.query)
const Header = param.bind(param, Symbols.header)
const JsonProperty = param.bind(param, Symbols.jsonProperty)

function Body(type?: BodyType) {
    function innerBody(target: Object, propertyKey: string | symbol, parameterIndex: number) {
        if (Reflect.getOwnMetadata(Symbols.body, target, propertyKey) != null) {
            throw new Error(`@Body already defined for key: ${propertyKey.toString()}`)
        }

        const value = { index: parameterIndex, type: type || BodyType.JSON }

        Reflect.defineMetadata(Symbols.body, value, target, propertyKey)
    }
    
    return innerBody
}

function resolveUrl(service: Neofit, key: string, args: IArguments): URL {
    let { path } = Reflect.getMetadata(Symbols.url, service, key)
    const fields = Reflect.getMetadata(Symbols.path, service, key) || {}
    const queryParams = Reflect.getMetadata(Symbols.query, service, key) || {}

    for (const key in fields) {
        const index = fields[key]
        const value = args[index]
        
        path = path.replace(`{${key}}`, value)
    }

    const absoluteUrl = new URL(path, service[baseUrlSymbol])

    for (const qs in queryParams) {
        const index = queryParams[qs]
        const value = args[index]

        if (value !== undefined) {
            absoluteUrl.searchParams.set(qs, value)
        }
    }

    return absoluteUrl
}

function resolveHeaders(service: Neofit, key: string, args: IArguments, requestBodyType: BodyType): Headers {
    const fields = Reflect.getMetadata(Symbols.header, service, key) || {}
    const headers = new Headers()

    for (const key in fields) {
        const index = fields[key]
        headers.set(key, args[index])
    }

    headers.set("Content-Type", requestBodyType)
    
    return headers
}

function resolveBody(service: Neofit, key: string, args: IArguments) {
    const index = Reflect.getMetadata(Symbols.body, service, key)
    
    if (index != null) {
        return args[index.index]
    }
}

function resolveVerb(service: Neofit, key: string): string {
    return Reflect.getMetadata(Symbols.url, service, key).verb
}

function resolveRequestBodyType(service: Neofit, key: string): BodyType {
    return Reflect.getMetadata(Symbols.request, service, key) || BodyType.JSON
}

function resolveResponseBodyType(service: Neofit, key: string): BodyType {
    return Reflect.getMetadata(Symbols.response, service, key) || BodyType.JSON
}

type Interceptor = (url: URL, req: RequestInit) => Promise<void>

type Resp<T> = {
    status: number,
    body: T,
}

abstract class Neofit {
    private [baseUrlSymbol]: URL
    private [interceptorSymbol]: Interceptor[]

    constructor(baseUrl: URL, ...interceptors: Interceptor[]) {
        this[baseUrlSymbol] = baseUrl
        this[interceptorSymbol] = interceptors
    }

    private async [neofitSymbol]<T>(key: string, args: IArguments): Promise<Resp<T>> {
        const absoluteUrl: URL = resolveUrl(this, key, args)
        const method = resolveVerb(this, key)
        const requestBodyType = resolveRequestBodyType(this, key)
        const responseBodyType = resolveResponseBodyType(this, key)

        const body = ((body) => {
            switch (requestBodyType) {
                case BodyType.JSON:
                case BodyType.Text:
                    return JSON.stringify(body)
                default:
                    return body
            }
        })(resolveBody(this, key, args))

        const headers = resolveHeaders(this, key, args, requestBodyType)
        const requestInit: RequestInit = {
            method,
            headers,
            body
        }

        for (const interceptor of this[interceptorSymbol]) {
            await interceptor(absoluteUrl, requestInit)
        }

        const request = fetch(absoluteUrl.toString(), requestInit)
        const response = await request

        const responseBody = (() => {
            switch (responseBodyType) {
            case BodyType.JSON:
                return response.json()
            case BodyType.Text:
                return response.text()
            case BodyType.FormData:
                return response.formData()
            case BodyType.Blob:
                return response.blob()
            }
        })()

        try {
            const body = await responseBody
            return {
                body,
                status: response.status
            }
        } catch (err) {
            err.response = response
            throw err
        }
    }
}

{{#each security}}
{{#if isApiKey}}
export function {{name}}ApiKeyInterceptor(apiKey: string): Interceptor {
  return function interceptor(url: URL, req: RequestInit): Promise<void> {
{{#if inHeader}}
    (req.headers as Headers).set("{{{key}}}", apiKey)
{{/if}}
{{#if inQuery}}
    url.searchParams.set("{{{key}}}", apiKey)
{{/if}}
    return Promise.resolve()
  }
}
{{/if}}
{{#if isHttp}}
{{#if isBasic}}
export function {{name}}BasicAuthInterceptor(username: string, password: string): Interceptor {
  return function interceptor(url: URL, req: RequestInit): Promise<void> {
    const base64Data = btoa(`${username}:${password}`)
    (req.headers as Headers).set("Authorization", `Basic ${base64Data}`)
    return Promise.resolve()
  }
}
{{/if}}
{{#if isBearer}}
export function {{name}}BearerInterceptor(bearerToken: string): Interceptor {
  return function interceptor(url: URL, req: RequestInit): Promise<void> {
    (req.headers as Headers).set("Authorization", `Bearer ${bearerToken}`)
    return Promise.resolve()
  }
}
{{/if}}
{{/if}}
{{#if isOAuth2}}
// OAuth interceptor not generated.
{{/if}}
{{/each}}

{{#if servers}}
export const {{{name}}}Server = {
{{#each servers}}
{{#if variables}}
  {{{description}}}({{{variables}}}) {
    return new URL("{{{url}}}"
{{#each replacements}}
      .replace("{{{key}}}", {{{value}}})
{{/each}}
    )
    }{{#unless @last}},{{/unless}}
{{else}}
  {{{description}}}: new URL("{{{url}}}"){{#unless @last}},{{/unless}}
{{/if}}
{{/each}}
}
{{/if}}

export class {{{name}}}Service extends Neofit {
{{#each groups}}
{{#if name}}
    // Section: {{name}}
{{/if}}
{{#each endpoints}}
    @{{{httpMethod}}}("{{{url}}}")
    {{{operationId}}}{{{operationParams}}}: {{{returnType}}} {
        return this[neofitSymbol]("{{{operationId}}}", arguments)
    }
{{#unless @last}}

{{/unless}}
{{/each}}
{{/each}}
}


{{#each models}}
{{#if isEnum}}
export enum {{{name}}} {
{{#each values}}
    {{{key}}} = "{{{value}}}"{{#unless @last}},{{else}}{{/unless}}
{{/each}}
}
{{else}}
export class {{{name}}} {
{{#each fields}}
    {{{name}}}: {{{type}}}
{{/each}}
{{!-- {{#each fields}}
{{#unless isNameEqualToKey}}
    @JsonProperty("{{{key}}}")
{{/unless}}
{{#if format}}
    @Format("{{{format}}}")
{{/if}}
{{#if isEnum}}
{{#if isOptional}}
    {{{name}}}: string | undefined // {{{type}}}
{{else}}
    {{{name}}}: string // {{{type}}}
{{/if}}
{{else}}
    {{{name}}}: {{{type}}}
{{/if}}
{{/each}} --}}
{{#each enums}}

{{#if isEnum}}
    static {{{name}}} = new class {{{name}}} {
{{#each values}}
        static {{{key}}} = "{{{value}}}"
{{/each}}
    }
{{/if}}
{{!-- {{#if isOneOf}}
    sealed class {{{name}}} {
{{#each values}}
        data class {{{key}}}(val value: {{{value}}}): {{{../name}}}()
{{/each}}
    }
{{/if}} --}}
{{#unless @last}}

{{/unless}}
{{/each}}
}
{{/if}}

{{/each}}

{{#if config.dev}}
export async function createOAuth2AuthCode(authUrl, clientId, redirectUri, scopes = null, execPath = null) {
    const config: any = { headless: false }
    if (execPath != null) {
        config.executablePath = execPath
    }

    const browser = await puppeteer.launch(config)
    const page = await browser.newPage()
    
    const url = new URL(authUrl)
    url.searchParams.set("response_type", "code")
    url.searchParams.set("client_id", clientId)
    url.searchParams.set("redirect_uri", redirectUri)
    if (scopes != null) {
        url.searchParams.set("scope", scopes)
    }
    
    await page.goto(url.toString(), { waitUntil: "networkidle2" })
    const response = await page.waitForResponse(req => req.url().startsWith(redirectUri), { timeout: 0 })
    const responseUrl = new URL(response.url())
    
    await browser.close()
    
    return responseUrl.searchParams.get("code")
}

export function printService(service: Neofit) {
    console.log(`Base URL: ${service[baseUrlSymbol]}`)

    const proto = Object.getPrototypeOf(service)
    const fields = Object.getOwnPropertyNames(proto)

    for (const k of fields) {
        const meta = Reflect.getMetadata(Symbols.url, service, k)
        if (meta == null) {
            continue
        }

        const { verb, path } = meta
        const reqBodyType = resolveRequestBodyType(service, k)
        const resBodyType = resolveResponseBodyType(service, k)
        console.log(`${verb} ${path} -> ${reqBodyType}, <- ${resBodyType}`)

        const queryParams = Reflect.getMetadata(Symbols.query, service, k)
        if (queryParams) {
            console.log(`  Query: ${Object.keys(queryParams).join(", ")}`)
        }
    }
}
{{/if}}
