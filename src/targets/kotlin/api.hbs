@file:Suppress("MoveLambdaOutsideParentheses")

{{#if config.package}}
package {{{config.package}}}
{{/if}}

// Generated. Do not edit.

import android.app.Activity
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import com.google.gson.Gson
import com.google.gson.GsonBuilder
import com.google.gson.TypeAdapter
import com.google.gson.TypeAdapterFactory
import com.google.gson.annotations.SerializedName
import com.google.gson.reflect.TypeToken
import com.google.gson.stream.JsonReader
import com.google.gson.stream.JsonWriter
import io.reactivex.Completable
import io.reactivex.Single
import io.reactivex.android.schedulers.AndroidSchedulers
import io.reactivex.disposables.Disposables
import io.reactivex.subjects.PublishSubject
import net.openid.appauth.*
import okhttp3.*
import retrofit2.Retrofit
import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.http.*
import java.io.Serializable
import java.text.SimpleDateFormat
import java.util.*
import java.util.concurrent.TimeUnit
{{#if config.imports}}
{{#each config.imports}}
import {{{this}}}
{{/each}}
{{/if}}

@Target(AnnotationTarget.TYPE)
@MustBeDocumented
annotation class Format(val value: String)

interface JsonEnum {
    val value: String
}

{{#if servers}}
sealed class {{{name}}}Server(private val urlPattern: String) {
{{#each servers}}
{{#if variables}}
    data class {{{description}}}({{{variables}}}): {{{../name}}}Server("{{{url}}}") {
        override fun toString(): String {
            return this.urlPattern
{{#each replacements}}
                .replace("{{{key}}}", {{{value}}})
{{/each}}
        }
    }
{{else}}
    object {{{description}}}: {{{../name}}}Server("{{{url}}}")
{{/if}}
{{/each}}

    override fun toString(): String = this.urlPattern
}

{{/if}}
{{! SERVICE}}

{{#each security}}
{{#if isApiKey}}
class {{{../name}}}{{{name}}}Interceptor(private val token: String): Interceptor {
    override fun intercept(chain: Interceptor.Chain): Response {
        val req = chain.request()
        val newReq = req.newBuilder()
{{#if inHeader}}
            .header("{{{key}}}", token)
{{/if}}
{{#if inQuery}}
            .url(req.url().newBuilder().addQueryParameter("{{{key}}}", token).build())
{{/if}}
            .build()
        return chain.proceed(newReq)
    }
}
{{/if}}
{{#if isOAuth2}}
{{> oauth-activity }}

class {{{name}}}OAuth(val clientId: String, val redirectUri: Uri) {
    companion object {
        internal val subject =
            PublishSubject.create<Pair<AuthorizationResponse?, AuthorizationException?>>()
    }
    
    enum class Scope(override val value: String): JsonEnum {
{{#each scopes}}
        {{{name}}}("{{{value}}}"){{#unless @last}},{{else}};{{/unless}}
{{/each}}

        override fun toString() = value
    }

{{#if isOpenIdConnect}}
    val openIdConnectUrl = Uri.parse("{{{openIdConnectUrl}}}")!!

    private val config = Single.create<AuthorizationServiceConfiguration> { emitter ->
        AuthorizationServiceConfiguration.fetchFromUrl(openIdConnectUrl, { config, ex ->
            if (ex != null) {
                emitter.onError(ex)
            } else if (config != null) {
                emitter.onSuccess(config)
            } else {
                emitter.onError(RuntimeException("Config and exception were both null"))
            }
        })
        
        Disposables.empty()
    }
{{else}}
    val authorizeUri = Uri.parse("{{{authorizationUrl}}}")!!
    val accessTokenUri = Uri.parse("{{{tokenUrl}}}")!!
{{#if refreshUrl}}
    val refreshUri = Uri.parse("{{{refreshUrl}}}")!!
{{/if}}

    private val config = Single.just(AuthorizationServiceConfiguration(authorizeUri, accessTokenUri))
{{/if}}
    private val authActivityClass get() = {{{name}}}OAuthActivity::class.java

    fun authorize(activity: Activity, scopes: List<Scope>? = null, prompt: String? = null, additionParameters: Map<String, String>? = null): Single<AuthState> {
        val service = AuthorizationService(activity)
        
        return config.flatMap { config -> 
            val observer = subject
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribeOn(AndroidSchedulers.mainThread())
                    .take(1)
                    .map { AuthState(it.first, it.second) }
                    .singleOrError()
                    .doFinally { service.dispose() }

            val req = AuthorizationRequest.Builder(config,
                    clientId,
                    ResponseTypeValues.CODE,
                    redirectUri)
    {{#if isAuthorizationCode}}
                    .setCodeVerifier(null)
    {{/if}}
                    .setScopes(scopes?.map { it.toString() })
                    .setPrompt(prompt)
                    .setAdditionalParameters(additionParameters)
                    .build()

            val pendingIntent = PendingIntent.getActivity(
                    activity, 0, Intent(activity, authActivityClass), 0)

            service.performAuthorizationRequest(req, pendingIntent)

            observer
        }
    }

{{#if isAuthorizationCode}}
    // This function should only be used during testing to ensure the security of the clientSecret.
    fun accessToken(activity: Activity, authState: AuthState, clientSecret: String): Single<AuthState> {
        val code = authState.lastAuthorizationResponse?.authorizationCode
            ?: return Single.error(Exception("No authorization response in auth state"))
        
        val service = AuthorizationService(activity)
        return config.flatMap { config ->
            val tokenReq = TokenRequest.Builder(config, clientId)
                    .setAuthorizationCode(code)
                    .setRedirectUri(redirectUri)
                    .build()

            Single.create<AuthState> { emitter ->
                service.performTokenRequest(tokenReq, ClientSecretPost(clientSecret), { res, ex ->
                    authState.update(res, ex)
                    emitter.onSuccess(authState)
                })
            }.doFinally { service.dispose() }
        }
    }
{{/if}}

    private inner class OAuthInterceptor(
            private val context: Context,
            private val authState: AuthState,
            private val clientSecret: String
    ): Interceptor {
        private fun refreshTokens(): String {
            val token = authState.accessToken
            if (!authState.needsTokenRefresh && token != null) {
                return token
            }

            return Single.create<String> { emitter ->
                val service = AuthorizationService(context)

                authState.performActionWithFreshTokens(service, ClientSecretPost(clientSecret), { accessToken, _, ex ->
                    when {
                        ex != null -> emitter.onError(ex)
                        accessToken != null -> emitter.onSuccess(accessToken)
                        else -> emitter.onError(Exception("accessToken is null"))
                    }

                    service.dispose()
                })
            }.timeout(30, TimeUnit.SECONDS).blockingGet()
        }

        override fun intercept(chain: Interceptor.Chain): Response {
            val accessToken = refreshTokens()

            val req = chain.request().newBuilder()
                    .addHeader("Authorization", "Bearer $accessToken")
                    .build()

            return chain.proceed(req)
        }
    }

    fun interceptor(context: Context, authState: AuthState, clientSecret: String): Interceptor {
        return OAuthInterceptor(context, authState, clientSecret)
    }
}
        
{{/if}}
{{/each}}

private fun createGson(): Gson {
    fun createDateFormatter(pattern: String, tz: String): SimpleDateFormat {
        val df = SimpleDateFormat(pattern, Locale.ROOT)
        df.timeZone = TimeZone.getTimeZone(tz)
        return df
    }

    class EnumTypeAdapter<T>(private val type: T) : TypeAdapter<T>() where T: JsonEnum {
        override fun write(writer: JsonWriter, value: T) {
            writer.value(value.value)
        }

        override fun read(reader: JsonReader): T {
            val s = reader.nextString()
            return type::class.java.enumConstants.first { it.value == s }
                ?: throw Exception("Invalid value: $s")
        }
    }

    class DateAdapter(format: String) : TypeAdapter<Date>() {
        private val formatter = when (format) {
            "date" -> createDateFormatter("yyyy-MM-dd", "UTC")
            else -> createDateFormatter("yyyy-MM-dd'T'HH:mm:ss'Z'", "UTC")
        }

        override fun write(writer: JsonWriter, value: Date) {
            writer.value(formatter.format(value))
        }

        override fun read(reader: JsonReader): Date {
            return formatter.parse(reader.nextString())
        }
    }

    class DateAdapterFactory : TypeAdapterFactory {
        override fun <T> create(gson: Gson, type: TypeToken<T>): TypeAdapter<T>? {
            if (type.rawType != Date::class.java) {
                return null
            }

            val format = type.rawType.getAnnotation(Format::class.java)?.value ?: "date-time"
            @Suppress("UNCHECKED_CAST")
            return DateAdapter(format).nullSafe() as TypeAdapter<T>
        }
    }

    class EnumTypeAdapterFactory : TypeAdapterFactory {
        override fun <T> create(gson: Gson, type: TypeToken<T>): TypeAdapter<T>? {
            if (!type.rawType.isEnum || type.rawType.interfaces.contains(JsonEnum::class.java)) {
                return null
            }

            @Suppress("UNCHECKED_CAST")
            return EnumTypeAdapter(type.rawType as JsonEnum) as TypeAdapter<T>
        }
    }

    return GsonBuilder()
            .registerTypeAdapterFactory(EnumTypeAdapterFactory())
            .registerTypeAdapterFactory(DateAdapterFactory())
            .setDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
            .create()
}

interface {{{name}}}Service {
    companion object {
{{#if servers}}
        fun create(server: {{{name}}}Server, vararg interceptors: Interceptor) =
                 create(server.toString(), *interceptors)

{{/if}}
        fun create(baseUrl: String, vararg interceptors: Interceptor): {{{name}}}Service =
                Retrofit.Builder()
                        .client(interceptors.fold(OkHttpClient.Builder(), { acc, cur -> acc.addInterceptor(cur) }).build())
                        .baseUrl(baseUrl)
                        .addConverterFactory(GsonConverterFactory.create(createGson()))
                        .addCallAdapterFactory(RxJava2CallAdapterFactory.createAsync())
                        .build()
                        .create({{{name}}}Service::class.java)
    }
{{#each groups}}
{{#if name}}
    // Section: {{name}}
{{/if}}
{{#each endpoints}}

    @{{{httpMethod}}}("{{{url}}}")
    fun {{{operationId}}}{{{operationParams}}}: {{{returnType}}}
{{/each}}
{{/each}}
}

{{! Models }}
{{#each models}}
{{#if isEnum}}
enum class {{{name}}}(override val value: String): JsonEnum {
{{#each values}}
    {{{key}}}("{{{value}}}"){{#unless @last}},{{else}};{{/unless}}
{{/each}}

    override fun toString() = value
}
{{else}}
data class {{{name}}}(
{{#each fields}}
    {{#if key}}
    {{#unless isNameEqualToKey}}
        @SerializedName("{{{key}}}")
    {{/unless}}
    {{/if}}
        val {{{name}}}: {{#if format}}@Format("{{{format}}}") {{/if}}{{{type}}}{{#unless @last}},{{/unless}}
{{/each}}
) : Serializable {
{{#each fields}}
{{#if isNested}}
    {{> nested }}
{{/if}}
{{/each}}
{{#each enums}}
{{#if isEnum}}
    enum class {{{name}}}(override val value: String): JsonEnum {
{{#each values}}
        {{{key}}}("{{{value}}}"){{#unless @last}},{{else}};{{/unless}}
{{/each}}

        override fun toString() = value
    }
{{/if}}
{{#if isOneOf}}
    sealed class {{{name}}} {
{{#each values}}
        data class {{{key}}}(val value: {{{value}}}): {{{../name}}}()
{{/each}}
    }
{{/if}}
{{#unless @last}}

{{/unless}}
{{/each}}
}
{{/if}}

{{/each}}